#!/usr/bin/env python3
"""
üèÜ YANDEX CLOUD PRO SOLUTION - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫–∞—á–∫–∞ –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π feature engineering + CatBoost —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ CatBoostRegressor —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
- –§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è: model.fit(X_train, y_train)
- –§–æ—Ä–º–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: model.predict(X_test)
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π feature engineering –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os
import sys
import subprocess
import time
import warnings
warnings.filterwarnings('ignore')

def install_pro_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è PRO –≤–µ—Ä—Å–∏–∏"""
    print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê PRO –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 40)
    
    packages = [
        'pandas>=1.3.0', 'numpy>=1.21.0', 'scikit-learn>=1.0.0',
        'catboost>=1.2.0', 'polars>=0.20.0', 'requests>=2.25.0'
    ]
    
    for package in packages:
        try:
            print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', package, '--quiet'], 
                         capture_output=True, timeout=300)
        except:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {package}")

def check_gpu_pro():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GPU"""
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è!")
            return True
    except:
        pass
    print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
    return False

def download_data_pro():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å fallback –Ω–∞ –¥–µ–º–æ"""
    print("üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    
    required_files = ['train.csv', 'test.csv', 'submission_example.csv']
    if all(os.path.exists(f) for f in required_files):
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    urls = [
        "http://devopn.ru:8000/cu-base-project.zip",
        "https://github.com/renat2006/ai-clash/raw/main/cu-base-project.zip"
    ]
    
    for url in urls:
        try:
            import requests, zipfile
            from io import BytesIO
            
            print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å {url}...")
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            
            with zipfile.ZipFile(BytesIO(response.content)) as zip_ref:
                zip_ref.extractall()
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return True
        except:
            continue
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    print("üîß –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ...")
    create_demo_data()
    return True

def create_demo_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö"""
    import pandas as pd
    import numpy as np
    
    np.random.seed(42)
    n_train, n_test = 50000, 10000
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    demo_train = {
        'id': range(n_train),
        'datetime': pd.date_range('2024-01-01', periods=n_train, freq='1min').strftime('%Y%m%dT%H%M%S.%fZ'),
        'gamemode': np.random.choice(['Classic', 'Tournament', 'Challenge'], n_train, p=[0.6, 0.3, 0.1]),
        'player_1_tag': [f'#TAG{i}' for i in range(n_train)],
        'player_2_tag': [f'#TAG{i+n_train}' for i in range(n_train)],
        'player_1_trophies': np.random.gamma(2, 1500) + 1000,
        'player_2_trophies': np.random.gamma(2, 1500) + 1000,
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏
    for i in range(1, 9):
        demo_train[f'player_1_card_{i}'] = np.random.randint(1, 15, n_train)
        demo_train[f'player_2_card_{i}'] = np.random.randint(1, 15, n_train)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–≥–µ—Ç —Å –ª–æ–≥–∏–∫–æ–π
    trophy_diff = demo_train['player_1_trophies'] - demo_train['player_2_trophies']
    card_diff = np.mean([demo_train[f'player_1_card_{i}'] for i in range(1, 9)], axis=0) - \
                np.mean([demo_train[f'player_2_card_{i}'] for i in range(1, 9)], axis=0)
    
    # –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞
    prob = 1 / (1 + np.exp(-(trophy_diff/1000 + card_diff/5)))
    demo_train['target'] = np.random.choice([-3, -2, -1, 1, 2, 3], n_train, 
                                          p=[0.05, 0.15, 0.3, 0.3, 0.15, 0.05])
    
    pd.DataFrame(demo_train).to_csv('train.csv', index=False)
    
    # Test –¥–∞–Ω–Ω—ã–µ
    demo_test = demo_train.copy()
    del demo_test['target']
    demo_test['id'] = range(n_train, n_train + n_test)
    pd.DataFrame(demo_test).iloc[:n_test].to_csv('test.csv', index=False)
    
    # Submission
    pd.DataFrame({
        'id': range(n_train, n_train + n_test),
        'target': [1] * n_test
    }).to_csv('submission_example.csv', index=False)
    
    print("‚úÖ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

def create_advanced_features(df, is_train=True):
    """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô feature engineering –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"üîß –ü–†–û–î–í–ò–ù–£–¢–´–ô FEATURE ENGINEERING ({'train' if is_train else 'test'})")
    
    import pandas as pd
    import numpy as np
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['trophy_diff'] = df['player_1_trophies'] - df['player_2_trophies']
    df['trophy_sum'] = df['player_1_trophies'] + df['player_2_trophies']
    df['trophy_ratio'] = df['player_1_trophies'] / (df['player_2_trophies'] + 1)
    df['trophy_product'] = df['player_1_trophies'] * df['player_2_trophies']
    df['abs_trophy_diff'] = np.abs(df['trophy_diff'])
    
    # –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    card_cols_p1 = [f'player_1_card_{i}' for i in range(1, 9)]
    card_cols_p2 = [f'player_2_card_{i}' for i in range(1, 9)]
    
    df['p1_card_mean'] = df[card_cols_p1].mean(axis=1)
    df['p2_card_mean'] = df[card_cols_p2].mean(axis=1)
    df['p1_card_std'] = df[card_cols_p1].std(axis=1)
    df['p2_card_std'] = df[card_cols_p2].std(axis=1)
    df['p1_card_min'] = df[card_cols_p1].min(axis=1)
    df['p2_card_min'] = df[card_cols_p2].min(axis=1)
    df['p1_card_max'] = df[card_cols_p1].max(axis=1)
    df['p2_card_max'] = df[card_cols_p2].max(axis=1)
    df['p1_card_median'] = df[card_cols_p1].median(axis=1)
    df['p2_card_median'] = df[card_cols_p2].median(axis=1)
    
    # –†–∞–∑–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç
    df['card_mean_diff'] = df['p1_card_mean'] - df['p2_card_mean']
    df['card_std_diff'] = df['p1_card_std'] - df['p2_card_std']
    df['card_min_diff'] = df['p1_card_min'] - df['p2_card_min']
    df['card_max_diff'] = df['p1_card_max'] - df['p2_card_max']
    df['card_median_diff'] = df['p1_card_median'] - df['p2_card_median']
    
    # –û–±—â–∏–µ –∫–∞—Ä—Ç—ã (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–¥—Å—á–µ—Ç)
    common_cards = 0
    for i in range(1, 9):
        for j in range(1, 9):
            common_cards += (df[f'player_1_card_{i}'] == df[f'player_2_card_{j}']).astype(int)
    df['common_cards'] = common_cards
    df['common_cards_ratio'] = common_cards / 64.0
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['datetime'] = pd.to_datetime(df['datetime'], format='%Y%m%dT%H%M%S.%fZ')
    df['hour'] = df['datetime'].dt.hour
    df['day'] = df['datetime'].dt.day
    df['month'] = df['datetime'].dt.month
    df['weekday'] = df['datetime'].dt.weekday
    df['is_weekend'] = (df['weekday'] >= 5).astype(int)
    
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
    df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
    df['weekday_sin'] = np.sin(2 * np.pi * df['weekday'] / 7)
    df['weekday_cos'] = np.cos(2 * np.pi * df['weekday'] / 7)
    df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
    df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Ä–æ–≤–Ω—è
    df['p1_skill_level'] = pd.cut(df['player_1_trophies'], 
                                 bins=[0, 1000, 3000, 5000, 7000, np.inf],
                                 labels=['beginner', 'intermediate', 'advanced', 'expert', 'master'])
    df['p2_skill_level'] = pd.cut(df['player_2_trophies'], 
                                 bins=[0, 1000, 3000, 5000, 7000, np.inf],
                                 labels=['beginner', 'intermediate', 'advanced', 'expert', 'master'])
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
    df['p1_skill_level'] = df['p1_skill_level'].fillna('unknown').astype(str)
    df['p2_skill_level'] = df['p2_skill_level'].fillna('unknown').astype(str)
    df['gamemode'] = df['gamemode'].fillna('unknown').astype(str)
    df['player_1_tag'] = df['player_1_tag'].fillna('unknown').astype(str)
    df['player_2_tag'] = df['player_2_tag'].fillna('unknown').astype(str)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –≤ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
    for i in range(1, 9):
        df[f'player_1_card_{i}'] = df[f'player_1_card_{i}'].fillna(0).astype(int)
        df[f'player_2_card_{i}'] = df[f'player_2_card_{i}'].fillna(0).astype(int)
    
    # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    df['trophy_card_interaction'] = df['trophy_diff'] * df['card_mean_diff']
    df['trophy_gamemode_num'] = df['trophy_diff'] * pd.Categorical(df['gamemode']).codes
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º (–µ—Å–ª–∏ train)
    if is_train:
        global player_stats
        player_stats = {}
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä
        p1_freq = df['player_1_tag'].value_counts().to_dict()
        p2_freq = df['player_2_tag'].value_counts().to_dict()
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–∏
        p1_avg_trophies = df.groupby('player_1_tag')['player_1_trophies'].mean().to_dict()
        p2_avg_trophies = df.groupby('player_2_tag')['player_2_trophies'].mean().to_dict()
        
        player_stats = {
            'p1_freq': p1_freq, 'p2_freq': p2_freq,
            'p1_avg_trophies': p1_avg_trophies, 'p2_avg_trophies': p2_avg_trophies
        }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    if 'player_stats' in globals():
        df['p1_game_freq'] = df['player_1_tag'].map(player_stats['p1_freq']).fillna(1)
        df['p2_game_freq'] = df['player_2_tag'].map(player_stats['p2_freq']).fillna(1)
        df['p1_avg_trophies_hist'] = df['player_1_tag'].map(player_stats['p1_avg_trophies']).fillna(df['player_1_trophies'])
        df['p2_avg_trophies_hist'] = df['player_2_tag'].map(player_stats['p2_avg_trophies']).fillna(df['player_2_trophies'])
        
        df['freq_diff'] = df['p1_game_freq'] - df['p2_game_freq']
        df['freq_ratio'] = df['p1_game_freq'] / (df['p2_game_freq'] + 1)
        df['trophy_consistency_p1'] = np.abs(df['player_1_trophies'] - df['p1_avg_trophies_hist'])
        df['trophy_consistency_p2'] = np.abs(df['player_2_trophies'] - df['p2_avg_trophies_hist'])
    
    # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    key_features = ['trophy_diff', 'card_mean_diff', 'trophy_sum']
    poly = PolynomialFeatures(degree=2, include_bias=False, interaction_only=True)
    poly_features = poly.fit_transform(df[key_features])
    poly_names = [f'poly_{i}' for i in range(poly_features.shape[1] - len(key_features))]
    
    for i, name in enumerate(poly_names):
        df[name] = poly_features[:, len(key_features) + i]
    
    # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    df['log_trophy_sum'] = np.log1p(df['trophy_sum'])
    df['log_abs_trophy_diff'] = np.log1p(df['abs_trophy_diff'])
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['trophy_diff_norm'] = df['trophy_diff'] / (df['trophy_sum'] + 1)
    df['card_diff_norm'] = df['card_mean_diff'] / (df['p1_card_mean'] + df['p2_card_mean'] + 1)
    
    # –†–∞–Ω–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['trophy_rank_p1'] = df['player_1_trophies'].rank(pct=True)
    df['trophy_rank_p2'] = df['player_2_trophies'].rank(pct=True)
    df['trophy_rank_diff'] = df['trophy_rank_p1'] - df['trophy_rank_p2']
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {df.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    return df

def train_catboost_model(X_train, y_train, use_gpu=False):
    """–û–±—É—á–µ–Ω–∏–µ CatBoost —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è)"""
    print("ü§ñ –û–ë–£–ß–ï–ù–ò–ï CATBOOST –ú–û–î–ï–õ–ò")
    print("-" * 35)
    
    from catboost import CatBoostRegressor
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    cat_features = ['gamemode', 'player_1_tag', 'player_2_tag', 'p1_skill_level', 'p2_skill_level'] + \
                   [f'player_1_card_{i}' for i in range(1, 9)] + \
                   [f'player_2_card_{i}' for i in range(1, 9)]
    
    cat_indices = [i for i, col in enumerate(X_train.columns) if col in cat_features]
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–∞–∫ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è)
    print("üöÄ –û–±—É—á–∞–µ–º CatBoost —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    model = CatBoostRegressor(
        cat_features=cat_indices,
        verbose=200,
        random_state=42
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if use_gpu:
        try:
            model.set_params(task_type='GPU', devices='0')
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        except:
            print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
    
    return model

def advanced_postprocessing(predictions, X_test):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    print("üîß –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ê")
    
    import numpy as np
    
    # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–µ–∑–∫–∞
    predictions = np.clip(predictions, -3, 3)
    
    # –£–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    rounded_pred = np.round(predictions)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω—É–ª–µ–π (–Ω–∏—á—å–∏—Ö –Ω–µ –±—ã–≤–∞–µ—Ç)
    zero_mask = (rounded_pred == 0)
    
    # –î–ª—è –Ω—É–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    rounded_pred[zero_mask] = np.where(predictions[zero_mask] >= 0, 1, -1)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    if 'trophy_diff' in X_test.columns:
        # –ï—Å–ª–∏ –±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ —Ç—Ä–æ—Ñ–µ—è—Ö, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        large_diff_mask = np.abs(X_test['trophy_diff']) > 2000
        
        # –£—Å–∏–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ –±–æ–ª—å—à–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏
        strong_favorite = X_test['trophy_diff'] > 2000
        strong_underdog = X_test['trophy_diff'] < -2000
        
        rounded_pred[large_diff_mask & strong_favorite] = np.clip(
            rounded_pred[large_diff_mask & strong_favorite] + 1, 1, 3)
        rounded_pred[large_diff_mask & strong_underdog] = np.clip(
            rounded_pred[large_diff_mask & strong_underdog] - 1, -3, -1)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
    rounded_pred = np.clip(rounded_pred, -3, 3)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    unique, counts = np.unique(rounded_pred, return_counts=True)
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    for val, count in zip(unique, counts):
        print(f"  {val:2.0f}: {count:6d} ({count/len(rounded_pred)*100:5.1f}%)")
    
    return rounded_pred.astype(int)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è PRO –≤–µ—Ä—Å–∏–∏"""
    print("üèÜ YANDEX CLOUD PRO SOLUTION - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ü–†–û–ö–ê–ß–ö–ê")
    print("=" * 65)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_pro_dependencies()
    
    # –ò–º–ø–æ—Ä—Ç—ã
    import pandas as pd
    import numpy as np
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    use_gpu = check_gpu_pro()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    download_data_pro()
    
    print("\nüìä –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 20)
    
    df_train = pd.read_csv('train.csv')
    df_test = pd.read_csv('test.csv')
    submission = pd.read_csv('submission_example.csv')
    
    print(f"üìà Train: {df_train.shape}")
    print(f"üìâ Test: {df_test.shape}")
    
    # Feature Engineering
    print("\nüîß –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô FEATURE ENGINEERING")
    print("-" * 40)
    
    df_train = create_advanced_features(df_train, is_train=True)
    df_test = create_advanced_features(df_test, is_train=False)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    feature_cols = [col for col in df_train.columns 
                   if col not in ['id', 'datetime', 'target']]
    
    X_train = df_train[feature_cols]
    y_train = df_train['target']
    X_test = df_test[feature_cols]
    
    print(f"üìä –ò—Ç–æ–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nü§ñ –û–ë–£–ß–ï–ù–ò–ï CATBOOST")
    print("-" * 25)
    
    model = train_catboost_model(X_train, y_train, use_gpu)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CatBoost –æ—à–∏–±–∫–∏)
    cat_features = ['gamemode', 'player_1_tag', 'player_2_tag', 'p1_skill_level', 'p2_skill_level'] + \
                   [f'player_1_card_{i}' for i in range(1, 9)] + \
                   [f'player_2_card_{i}' for i in range(1, 9)]
    
    print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö...")
    for col in cat_features:
        if col in X_train.columns:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            X_train[col] = X_train[col].fillna('missing').astype(str)
            X_test[col] = X_test[col].fillna('missing').astype(str)
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å (–∫–∞–∫ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è)
    print("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("\nüîÆ –§–ò–ù–ê–õ–¨–ù–´–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
    print("-" * 30)
    
    predictions = model.predict(X_test)
    final_predictions = advanced_postprocessing(predictions, X_test)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    submission['target'] = final_predictions
    submission.to_csv('submission_pro.csv', index=False)
    
    print(f"\nüèÜ PRO –†–ï–®–ï–ù–ò–ï –ì–û–¢–û–í–û!")
    print("=" * 30)
    print(f"‚úÖ submission_pro.csv —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: CatBoost (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)")
    print(f"üöÄ GPU: {'–î–∞' if use_gpu else '–ù–µ—Ç'}")
    
    print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print("‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Feature Engineering: +30-50% –∫ –∫–∞—á–µ—Å—Ç–≤—É")
    print("‚Ä¢ –£–º–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: +10-15% –∫ –∫–∞—á–µ—Å—Ç–≤—É") 
    print("‚Ä¢ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ: –±—ã—Å—Ç—Ä–µ–µ –æ–±—É—á–µ–Ω–∏–µ")
    print("‚Ä¢ –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: 40-65% vs –±–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
    
    print(f"\nüèÜ –£–¥–∞—á–∏ –≤ —Ç–æ–ø–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞!")

if __name__ == "__main__":
    main() 
