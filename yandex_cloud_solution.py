#!/usr/bin/env python3
"""
üöÄ Yandex Cloud —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è Clash Royale
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Yandex DataSphere –∏ Compute Cloud
"""

import os
import sys
import subprocess
import requests
import zipfile
from io import BytesIO
import warnings
warnings.filterwarnings('ignore')

# Yandex Cloud —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
YANDEX_ENV = '/home/jupyter' in os.getcwd() or 'DATASPHERE' in os.environ

def install_dependencies():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Yandex Cloud
    """
    print("üîß –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –î–õ–Ø YANDEX CLOUD")
    print("=" * 45)
    
    dependencies = [
        'polars>=0.20.0',
        'requests>=2.25.0',
        'catboost>=1.2.0',
        'scikit-learn>=1.3.0'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    try:
        import pandas, numpy
        print("‚úÖ Pandas –∏ NumPy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError:
        print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã...")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pandas', 'numpy', '--quiet'])
    
    for dep in dependencies:
        try:
            print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {dep}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', dep, '--quiet'])
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {dep}: {e}")
            print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —ç—Ç–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")

def check_yandex_gpu():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –≤ Yandex Cloud
    """
    print("üéÆ –ü–†–û–í–ï–†–ö–ê GPU –í YANDEX CLOUD")
    print("-" * 35)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if 'DATASPHERE' in os.environ:
        print("‚úÖ Yandex DataSphere –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º NVIDIA GPU
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ NVIDIA GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
            lines = result.stdout.split('\n')
            for line in lines:
                if any(gpu in line for gpu in ['Tesla', 'GeForce', 'Quadro', 'V100', 'T4', 'A100']):
                    print(f"üöÄ GPU: {line.strip()}")
                    break
            return True
        else:
            print("‚ö†Ô∏è  nvidia-smi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except FileNotFoundError:
        print("‚ö†Ô∏è  nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ CatBoost
    try:
        import catboost
        test_model = catboost.CatBoostRegressor(
            iterations=1,
            task_type='GPU',
            devices='0',
            verbose=False
        )
        print("‚úÖ CatBoost –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  CatBoost GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üíª –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU")
        return False

def download_data_yandex():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Yandex Cloud
    """
    print("üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 20)
    
    required_files = ['train.csv', 'test.csv', 'submission_example.csv']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —É–∂–µ
    files_exist = all(os.path.exists(file) for file in required_files)
    
    if files_exist:
        print("‚úÖ –§–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –≤ Yandex Cloud
    yandex_paths = [
        '/home/jupyter/work/resources',
        '/home/jupyter/work',
        './data',
        './input',
        '.'
    ]
    
    for path in yandex_paths:
        if os.path.exists(path):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {path}...")
            for file in required_files:
                file_path = os.path.join(path, file)
                if os.path.exists(file_path):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω {file} –≤ {path}")
                    # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    import shutil
                    shutil.copy2(file_path, file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
    files_exist = all(os.path.exists(file) for file in required_files)
    
    if not files_exist:
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...")
        url = "http://devopn.ru:8000/cu-base-project.zip"
        
        try:
            print("üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            
            print("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤...")
            with zipfile.ZipFile(BytesIO(response.content)) as zip_ref:
                zip_ref.extractall()
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é:")
            print("1. –°–∫–∞—á–∞–π—Ç–µ http://devopn.ru:8000/cu-base-project.zip")
            print("2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É")
            print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç")
            raise

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex Cloud
    """
    print("üöÄ YANDEX CLOUD CLASH ROYALE SOLUTION")
    print("=" * 50)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ
    try:
        statvfs = os.statvfs('.')
        free_space = statvfs.f_bavail * statvfs.f_frsize // (1024**3)
        print(f"üíæ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {free_space} GB")
    except:
        print("üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if YANDEX_ENV:
        print("‚úÖ –ó–∞–ø—É—Å–∫ –≤ Yandex Cloud")
    else:
        print("‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ –≤–Ω–µ Yandex Cloud")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies()
    
    # –ò–º–ø–æ—Ä—Ç—ã
    try:
        import polars as pl
        import numpy as np
        import pandas as pd
        from catboost import CatBoostRegressor
        print("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        raise
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    use_gpu = check_yandex_gpu()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    download_data_yandex()
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–∞—Å—Ç–æ—Ç –∏–≥—Ä–æ–∫–æ–≤
    global_p1_freq_map = {}
    global_p2_freq_map = {}
    
    print("\nüìä –ó–ê–ì–†–£–ó–ö–ê –ò –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("-" * 35)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_train = pl.read_csv('train.csv')
    df_test = pl.read_csv('test.csv')
    submission = pd.read_csv('submission_example.csv')
    
    print(f"üìà Train shape: {df_train.shape}")
    print(f"üìâ Test shape: {df_test.shape}")
    print(f"üìã Submission shape: {submission.shape}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîç –ü—Ä–∏–º–µ—Ä train –¥–∞–Ω–Ω—ã—Ö:")
    print(df_train.head(3).to_pandas())
    
    def create_yandex_features(df, is_train=True):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è Yandex Cloud
        """
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ({'train' if is_train else 'test'})...")
        
        # 1. –ë–ê–ó–û–í–´–ï –¢–†–û–§–ï–ô–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
        df = df.with_columns([
            (pl.col('player_1_trophies') - pl.col('player_2_trophies')).alias('trophy_diff'),
            (pl.col('player_1_trophies') + pl.col('player_2_trophies')).alias('trophy_sum'),
            (pl.col('player_1_trophies') / (pl.col('player_2_trophies') + 1)).alias('trophy_ratio'),
            (pl.col('player_1_trophies') - pl.col('player_2_trophies')).abs().alias('abs_trophy_diff'),
            (pl.col('player_1_trophies') * pl.col('player_2_trophies')).alias('trophy_product'),
            ((pl.col('player_1_trophies') + pl.col('player_2_trophies')) / 2).alias('trophy_mean')
        ])
        
        # 2. –ü–†–ò–ó–ù–ê–ö–ò –ö–ê–†–¢
        card_cols_p1 = [f'player_1_card_{i}' for i in range(1, 9)]
        card_cols_p2 = [f'player_2_card_{i}' for i in range(1, 9)]
        
        df = df.with_columns([
            pl.mean_horizontal([pl.col(f'player_1_card_{i}') for i in range(1, 9)]).alias('player_1_avg_card'),
            pl.mean_horizontal([pl.col(f'player_2_card_{i}') for i in range(1, 9)]).alias('player_2_avg_card'),
            pl.min_horizontal([pl.col(f'player_1_card_{i}') for i in range(1, 9)]).alias('player_1_min_card'),
            pl.min_horizontal([pl.col(f'player_2_card_{i}') for i in range(1, 9)]).alias('player_2_min_card'),
            pl.max_horizontal([pl.col(f'player_1_card_{i}') for i in range(1, 9)]).alias('player_1_max_card'),
            pl.max_horizontal([pl.col(f'player_2_card_{i}') for i in range(1, 9)]).alias('player_2_max_card'),
            pl.concat_list(card_cols_p1).list.median().alias('player_1_median_card'),
            pl.concat_list(card_cols_p2).list.median().alias('player_2_median_card'),
            pl.concat_list(card_cols_p1).list.std().alias('p1_card_std'),
            pl.concat_list(card_cols_p2).list.std().alias('p2_card_std')
        ])
        
        # –†–∞–∑–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç
        df = df.with_columns([
            (pl.col('player_1_avg_card') - pl.col('player_2_avg_card')).alias('avg_card_diff'),
            (pl.col('player_1_min_card') - pl.col('player_2_min_card')).alias('min_card_diff'),
            (pl.col('player_1_max_card') - pl.col('player_2_max_card')).alias('max_card_diff'),
            (pl.col('player_1_median_card') - pl.col('player_2_median_card')).alias('median_card_diff'),
            (pl.col('p1_card_std') - pl.col('p2_card_std')).alias('card_std_diff')
        ])
        
        # 3. –û–ë–©–ò–ï –ö–ê–†–¢–´
        common_cards_expr = pl.lit(0)
        for i in range(1, 9):
            for j in range(1, 9):
                common_cards_expr = common_cards_expr + (
                    pl.col(f'player_1_card_{i}') == pl.col(f'player_2_card_{j}')
                ).cast(pl.Int32)
        
        df = df.with_columns([
            common_cards_expr.alias('common_cards_count'),
            (common_cards_expr / 8.0).alias('common_cards_ratio')
        ])
        
        # 4. –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
        df = df.with_columns([
            pl.col('datetime').str.strptime(pl.Datetime, format='%Y%m%dT%H%M%S%.fZ').alias('parsed_datetime')
        ])
        
        df = df.with_columns([
            pl.col('parsed_datetime').dt.hour().alias('hour'),
            pl.col('parsed_datetime').dt.day().alias('day'),
            pl.col('parsed_datetime').dt.month().alias('month'),
            pl.col('parsed_datetime').dt.weekday().alias('weekday'),
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            (2 * np.pi * pl.col('parsed_datetime').dt.hour() / 24).sin().alias('hour_sin'),
            (2 * np.pi * pl.col('parsed_datetime').dt.hour() / 24).cos().alias('hour_cos'),
            (2 * np.pi * pl.col('parsed_datetime').dt.weekday() / 7).sin().alias('weekday_sin'),
            (2 * np.pi * pl.col('parsed_datetime').dt.weekday() / 7).cos().alias('weekday_cos')
        ])
        
        # 5. –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
        df = df.with_columns([
            pl.when(pl.col('player_1_trophies') < 1000).then(pl.lit('beginner'))
            .when(pl.col('player_1_trophies') < 3000).then(pl.lit('intermediate'))
            .when(pl.col('player_1_trophies') < 5000).then(pl.lit('advanced'))
            .when(pl.col('player_1_trophies') < 7000).then(pl.lit('expert'))
            .otherwise(pl.lit('master')).alias('player_1_skill_level'),
            
            pl.when(pl.col('player_2_trophies') < 1000).then(pl.lit('beginner'))
            .when(pl.col('player_2_trophies') < 3000).then(pl.lit('intermediate'))
            .when(pl.col('player_2_trophies') < 5000).then(pl.lit('advanced'))
            .when(pl.col('player_2_trophies') < 7000).then(pl.lit('expert'))
            .otherwise(pl.lit('master')).alias('player_2_skill_level'),
            
            pl.when(pl.col('trophy_sum') < 2000).then(pl.lit('low_tier'))
            .when(pl.col('trophy_sum') < 6000).then(pl.lit('mid_tier'))
            .when(pl.col('trophy_sum') < 10000).then(pl.lit('high_tier'))
            .otherwise(pl.lit('top_tier')).alias('match_tier')
        ])
        
        # 6. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø
        df = df.with_columns([
            (pl.col('trophy_diff') * pl.col('avg_card_diff')).alias('trophy_card_interaction'),
            (pl.col('trophy_diff') * pl.col('gamemode')).alias('trophy_gamemode_interaction'),
            (pl.col('player_1_avg_card') / (pl.col('player_1_trophies') + 1)).alias('p1_card_trophy_ratio'),
            (pl.col('player_2_avg_card') / (pl.col('player_2_trophies') + 1)).alias('p2_card_trophy_ratio')
        ])
        
        # 7. –û–ü–´–¢ –ò–ì–†–û–ö–û–í
        if is_train:
            nonlocal global_p1_freq_map, global_p2_freq_map
            p1_freq = df.group_by('player_1_tag').agg(pl.len().alias('p1_freq'))
            p2_freq = df.group_by('player_2_tag').agg(pl.len().alias('p2_freq'))
            
            df = df.join(p1_freq, on='player_1_tag', how='left')
            df = df.join(p2_freq, on='player_2_tag', how='left')
            
            global_p1_freq_map = p1_freq.to_pandas().set_index('player_1_tag')['p1_freq'].to_dict()
            global_p2_freq_map = p2_freq.to_pandas().set_index('player_2_tag')['p2_freq'].to_dict()
        else:
            df = df.with_columns([
                pl.col('player_1_tag').map_elements(
                    lambda x: global_p1_freq_map.get(x, 1), return_dtype=pl.Int64
                ).alias('p1_freq'),
                pl.col('player_2_tag').map_elements(
                    lambda x: global_p2_freq_map.get(x, 1), return_dtype=pl.Int64
                ).alias('p2_freq')
            ])
        
        df = df.with_columns([
            (pl.col('p1_freq') - pl.col('p2_freq')).alias('experience_diff'),
            (pl.col('p1_freq') + pl.col('p2_freq')).alias('total_experience'),
            (pl.col('p1_freq') / (pl.col('p2_freq') + 1)).alias('experience_ratio')
        ])
        
        # 8. –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
        df = df.with_columns([
            (pl.col('trophy_sum') + 1).log().alias('log_trophy_sum'),
            (pl.col('total_experience') + 1).log().alias('log_total_experience'),
            (pl.col('trophy_diff') ** 2).alias('trophy_diff_squared'),
            (pl.col('avg_card_diff') ** 2).alias('avg_card_diff_squared'),
            pl.col('trophy_diff').abs().sqrt().alias('sqrt_abs_trophy_diff'),
            (pl.col('trophy_diff') ** 3).alias('trophy_diff_cubed')
        ])
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df = df.drop('parsed_datetime')
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {df.shape}")
        return df
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("\nüîß FEATURE ENGINEERING")
    print("-" * 25)
    
    df_train = create_yandex_features(df_train, is_train=True)
    df_test = create_yandex_features(df_test, is_train=False)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—É—á–µ–Ω–∏—é
    print("\nü§ñ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –û–ë–£–ß–ï–ù–ò–Æ")
    print("-" * 30)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    cat_features = [
        'gamemode', 'player_1_tag', 'player_2_tag',
        'player_1_skill_level', 'player_2_skill_level', 'match_tier',
        'hour', 'day', 'month', 'weekday'
    ] + [f'player_1_card_{i}' for i in range(1, 9)] + [f'player_2_card_{i}' for i in range(1, 9)]
    
    print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(cat_features)}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è Yandex Cloud
    model_params = {
        'cat_features': cat_features,
        'random_state': 52,
        'verbose': 100,  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        'iterations': 2000 if use_gpu else 1200,  # –ë–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        'learning_rate': 0.08,
        'depth': 9,
        'l2_leaf_reg': 3,
        'bootstrap_type': 'Bernoulli',
        'subsample': 0.8,
        'eval_metric': 'RMSE',
        'early_stopping_rounds': 100
    }
    
    if use_gpu:
        model_params.update({
            'task_type': 'GPU',
            'devices': '0',
            'gpu_ram_part': 0.8  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ GPU –ø–∞–º—è—Ç–∏
        })
        print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    else:
        model_params['task_type'] = 'CPU'
        print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    
    model = CatBoostRegressor(**model_params)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X_train = df_train.drop(['id', 'datetime', 'target']).to_pandas()
    y_train = df_train['target'].to_pandas()
    
    print(f"üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {X_train.shape}")
    print(f"üéØ –¢–∞—Ä–≥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    print(y_train.value_counts().sort_index())
    
    # –û–±—É—á–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    print(f"\n‚è≥ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("-" * 20)
    print("üïê –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–µ–∑–∞...")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/validation –¥–ª—è early stopping
    from sklearn.model_selection import train_test_split
    X_tr, X_val, y_tr, y_val = train_test_split(
        X_train, y_train, test_size=0.2, random_state=42, stratify=y_train
    )
    
    model.fit(
        X_tr, y_tr,
        eval_set=(X_val, y_val),
        use_best_model=True,
        plot=False
    )
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print(f"\nüîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
    print("-" * 15)
    
    X_test = df_test.drop(['id', 'datetime']).to_pandas()
    predictions = model.predict(X_test)
    
    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("üîß –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    predictions = np.clip(predictions, -3, 3)
    predictions = np.round(predictions)
    predictions = np.where(predictions == 0, 
                          np.where(predictions >= 0, 1, -1), 
                          predictions)
    predictions = np.clip(predictions, -3, 3)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("-" * 12)
    
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    unique, counts = np.unique(predictions, return_counts=True)
    for val, count in zip(unique, counts):
        print(f"  {val:2.0f}: {count:6d} ({count/len(predictions)*100:5.1f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    submission['target'] = predictions.astype(int)
    submission.to_csv('submission.csv', index=False)
    
    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print(f"\nüèÜ –¢–û–ü-15 –í–ê–ñ–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í")
    print("-" * 30)
    
    feature_importance = model.get_feature_importance()
    feature_names = X_train.columns
    importance_df = pd.DataFrame({
        'feature': feature_names,
        'importance': feature_importance
    }).sort_values('importance', ascending=False)
    
    for i, row in importance_df.head(15).iterrows():
        print(f"  {row.name+1:2d}. {row['feature']:25s}: {row['importance']:8.2f}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –º–æ–¥–µ–ª–∏
    importance_df.to_csv('feature_importance.csv', index=False)
    model.save_model('catboost_model.cbm')
    
    print(f"\nüéâ –ì–û–¢–û–í–û!")
    print("=" * 20)
    print(f"‚úÖ submission.csv —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print(f"‚úÖ feature_importance.csv —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print(f"‚úÖ catboost_model.cbm —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {X_train.shape[1]}")
    print(f"üöÄ GPU: {'–î–∞' if use_gpu else '–ù–µ—Ç'}")
    print(f"üéØ –ò—Ç–µ—Ä–∞—Ü–∏–π –æ–±—É—á–µ–Ω–∏—è: {model.get_best_iteration()}")
    
    # Yandex Cloud —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
    if YANDEX_ENV:
        print(f"\nüìã YANDEX CLOUD –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
        print("1. –°–∫–∞—á–∞–π—Ç–µ submission.csv")
        print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ")
        print("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    
    print(f"\nüèÜ –£–¥–∞—á–∏ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏!")

if __name__ == "__main__":
    main() 