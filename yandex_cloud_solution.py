#!/usr/bin/env python3
"""
üèÜ YANDEX CLOUD ULTIMATE SOLUTION - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫–∞—á–∫–∞ —Å –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö Clash Royale –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º feature engineering

‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú:
- –¢–æ–ª—å–∫–æ CatBoostRegressor —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π feature engineering —Å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
- –£–º–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É—á–µ—Ç–æ–º –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã
"""

import os
import sys
import subprocess
import time
import warnings
warnings.filterwarnings('ignore')

def install_ultimate_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ULTIMATE –≤–µ—Ä—Å–∏–∏"""
    print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê ULTIMATE –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 45)
    
    packages = [
        'pandas>=1.3.0', 'numpy>=1.21.0', 'scikit-learn>=1.0.0',
        'catboost>=1.2.0', 'requests>=2.25.0', 'scipy>=1.7.0'
    ]
    
    for package in packages:
        try:
            print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', package, '--quiet'], 
                         capture_output=True, timeout=300)
        except:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {package}")

def check_gpu_ultimate():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GPU"""
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è!")
            return True
    except:
        pass
    print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
    return False

def download_data_ultimate():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback"""
    print("üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    
    required_files = ['train.csv', 'test.csv', 'submission_example.csv']
    if all(os.path.exists(f) for f in required_files):
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    urls = [
        "http://devopn.ru:8000/cu-base-project.zip",
        "https://github.com/renat2006/ai-clash/raw/main/cu-base-project.zip"
    ]
    
    for url in urls:
        try:
            import requests, zipfile
            from io import BytesIO
            
            print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å {url}...")
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            
            with zipfile.ZipFile(BytesIO(response.content)) as zip_ref:
                zip_ref.extractall()
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return True
        except:
            continue
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    print("üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ...")
    create_ultimate_demo_data()
    return True

def create_ultimate_demo_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö —Å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    import pandas as pd
    import numpy as np
    
    np.random.seed(42)
    n_train, n_test = 100000, 20000
    
    print(f"üéÆ –°–æ–∑–¥–∞–µ–º {n_train} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –º–∞—Ç—á–µ–π...")
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    demo_train = {
        'id': range(n_train),
        'datetime': pd.date_range('2024-01-01', periods=n_train, freq='30s').strftime('%Y%m%dT%H%M%S.%fZ'),
        'gamemode': np.random.choice([1, 2, 3, 4, 5], n_train, p=[0.4, 0.25, 0.15, 0.15, 0.05]),
        'player_1_tag': [f'#TAG{i:06d}' for i in range(n_train)],
        'player_2_tag': [f'#TAG{i+n_train:06d}' for i in range(n_train)],
    }
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤ (–≥–∞–º–º–∞-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    demo_train['player_1_trophies'] = np.random.gamma(2, 1200) + 800
    demo_train['player_2_trophies'] = np.random.gamma(2, 1200) + 800
    
    # –ö–∞—Ä—Ç—ã —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏ –∏ –º–µ—Ç–∞-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã (1-14) —Å —Ä–∞–∑–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    popular_cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    card_weights = [0.12, 0.11, 0.10, 0.09, 0.08, 0.08, 0.07, 0.07, 0.06, 0.06, 0.05, 0.05, 0.03, 0.03]
    
    for i in range(1, 9):
        demo_train[f'player_1_card_{i}'] = np.random.choice(popular_cards, n_train, p=card_weights)
        demo_train[f'player_2_card_{i}'] = np.random.choice(popular_cards, n_train, p=card_weights)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–≥–µ—Ç —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
    trophy_diff = demo_train['player_1_trophies'] - demo_train['player_2_trophies']
    
    # –ö–∞—Ä—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
    p1_card_strength = np.mean([demo_train[f'player_1_card_{i}'] for i in range(1, 9)], axis=0)
    p2_card_strength = np.mean([demo_train[f'player_2_card_{i}'] for i in range(1, 9)], axis=0)
    card_diff = p1_card_strength - p2_card_strength
    
    # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã
    # –¢—Ä–æ—Ñ–µ–∏ –≤–∞–∂–Ω–µ–µ –∫–∞—Ä—Ç (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3:1)
    win_probability = 1 / (1 + np.exp(-(trophy_diff/800 + card_diff/3)))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    # –ë–æ–ª—å—à–µ –º–∞—Ç—á–µ–π —Å —Ä–∞–∑–Ω–æ—Å—Ç—å—é 1-2 –∫–æ—Ä–æ–Ω—ã, –º–µ–Ω—å—à–µ —Å 3
    target_probs = {
        -3: 0.08, -2: 0.22, -1: 0.20,  # –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        1: 0.20, 2: 0.22, 3: 0.08      # –ø–æ–±–µ–¥—ã
    }
    
    targets = []
    for prob in win_probability:
        if prob > 0.5:  # –∏–≥—Ä–æ–∫ 1 –ø–æ–±–µ–∂–¥–∞–µ—Ç
            target = np.random.choice([1, 2, 3], p=[0.4, 0.44, 0.16])
        else:  # –∏–≥—Ä–æ–∫ 1 –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç
            target = np.random.choice([-1, -2, -3], p=[0.4, 0.44, 0.16])
        targets.append(target)
    
    demo_train['target'] = targets
    
    pd.DataFrame(demo_train).to_csv('train.csv', index=False)
    
    # Test –¥–∞–Ω–Ω—ã–µ
    demo_test = demo_train.copy()
    del demo_test['target']
    demo_test['id'] = range(n_train, n_train + n_test)
    pd.DataFrame(demo_test).iloc[:n_test].to_csv('test.csv', index=False)
    
    # Submission
    pd.DataFrame({
        'id': range(n_train, n_train + n_test),
        'target': [1] * n_test
    }).to_csv('submission_example.csv', index=False)
    
    print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

def create_ultimate_features(df, is_train=True):
    """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô feature engineering —Å –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π Clash Royale"""
    print(f"üéÆ ULTIMATE FEATURE ENGINEERING ({'train' if is_train else 'test'})")
    
    import pandas as pd
    import numpy as np
    from scipy import stats
    
    # === –ë–ê–ó–û–í–´–ï –¢–†–û–§–ï–ô–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
    df['trophy_diff'] = df['player_1_trophies'] - df['player_2_trophies']
    df['trophy_sum'] = df['player_1_trophies'] + df['player_2_trophies']
    df['trophy_ratio'] = df['player_1_trophies'] / (df['player_2_trophies'] + 1)
    df['trophy_product'] = df['player_1_trophies'] * df['player_2_trophies']
    df['abs_trophy_diff'] = np.abs(df['trophy_diff'])
    df['trophy_advantage'] = np.where(df['trophy_diff'] > 0, 1, -1)
    
    # === –ü–†–û–î–í–ò–ù–£–¢–´–ï –¢–†–û–§–ï–ô–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
    df['trophy_diff_normalized'] = df['trophy_diff'] / (df['trophy_sum'] + 1)
    df['trophy_dominance'] = df['trophy_diff'] / (np.maximum(df['player_1_trophies'], df['player_2_trophies']) + 1)
    df['trophy_geometric_mean'] = np.sqrt(df['player_1_trophies'] * df['player_2_trophies'])
    df['trophy_harmonic_mean'] = 2 / (1/(df['player_1_trophies']+1) + 1/(df['player_2_trophies']+1))
    
    # === –ö–ê–†–¢–û–ß–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
    card_cols_p1 = [f'player_1_card_{i}' for i in range(1, 9)]
    card_cols_p2 = [f'player_2_card_{i}' for i in range(1, 9)]
    
    # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç
    df['p1_card_mean'] = df[card_cols_p1].mean(axis=1)
    df['p2_card_mean'] = df[card_cols_p2].mean(axis=1)
    df['p1_card_std'] = df[card_cols_p1].std(axis=1)
    df['p2_card_std'] = df[card_cols_p2].std(axis=1)
    df['p1_card_min'] = df[card_cols_p1].min(axis=1)
    df['p2_card_min'] = df[card_cols_p2].min(axis=1)
    df['p1_card_max'] = df[card_cols_p1].max(axis=1)
    df['p2_card_max'] = df[card_cols_p2].max(axis=1)
    df['p1_card_median'] = df[card_cols_p1].median(axis=1)
    df['p2_card_median'] = df[card_cols_p2].median(axis=1)
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['p1_card_range'] = df['p1_card_max'] - df['p1_card_min']
    df['p2_card_range'] = df['p2_card_max'] - df['p2_card_min']
    df['p1_card_skew'] = df[card_cols_p1].skew(axis=1)
    df['p2_card_skew'] = df[card_cols_p2].skew(axis=1)
    df['p1_card_kurt'] = df[card_cols_p1].kurtosis(axis=1)
    df['p2_card_kurt'] = df[card_cols_p2].kurtosis(axis=1)
    
    # –†–∞–∑–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    df['card_mean_diff'] = df['p1_card_mean'] - df['p2_card_mean']
    df['card_std_diff'] = df['p1_card_std'] - df['p2_card_std']
    df['card_min_diff'] = df['p1_card_min'] - df['p2_card_min']
    df['card_max_diff'] = df['p1_card_max'] - df['p2_card_max']
    df['card_median_diff'] = df['p1_card_median'] - df['p2_card_median']
    df['card_range_diff'] = df['p1_card_range'] - df['p2_card_range']
    
    # === –ò–ì–†–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê: –û–ë–©–ò–ï –ö–ê–†–¢–´ –ò –°–ò–ù–ï–†–ì–ò–ò ===
    # –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –∫–∞—Ä—Ç
    common_cards_exact = 0
    for i in range(1, 9):
        for j in range(1, 9):
            common_cards_exact += (df[f'player_1_card_{i}'] == df[f'player_2_card_{j}']).astype(int)
    
    df['common_cards_exact'] = common_cards_exact
    df['common_cards_ratio'] = common_cards_exact / 64.0
    df['deck_similarity'] = common_cards_exact / 8.0
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–¥–µ
    df['p1_unique_cards'] = df[card_cols_p1].nunique(axis=1)
    df['p2_unique_cards'] = df[card_cols_p2].nunique(axis=1)
    df['unique_cards_diff'] = df['p1_unique_cards'] - df['p2_unique_cards']
    
    # === –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
    df['datetime'] = pd.to_datetime(df['datetime'], format='%Y%m%dT%H%M%S.%fZ')
    df['hour'] = df['datetime'].dt.hour
    df['day'] = df['datetime'].dt.day
    df['month'] = df['datetime'].dt.month
    df['weekday'] = df['datetime'].dt.weekday
    df['is_weekend'] = (df['weekday'] >= 5).astype(int)
    df['is_prime_time'] = ((df['hour'] >= 18) & (df['hour'] <= 22)).astype(int)
    df['is_morning'] = ((df['hour'] >= 6) & (df['hour'] <= 12)).astype(int)
    
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
    df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
    df['weekday_sin'] = np.sin(2 * np.pi * df['weekday'] / 7)
    df['weekday_cos'] = np.cos(2 * np.pi * df['weekday'] / 7)
    df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
    df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
    df['day_sin'] = np.sin(2 * np.pi * df['day'] / 31)
    df['day_cos'] = np.cos(2 * np.pi * df['day'] / 31)
    
    # === –ò–ì–†–û–í–´–ï –†–ï–ñ–ò–ú–´ ===
    df['gamemode'] = df['gamemode'].fillna(1).astype(int)
    df['is_ranked'] = (df['gamemode'] == 1).astype(int)
    df['is_tournament'] = (df['gamemode'].isin([2, 3])).astype(int)
    df['is_special'] = (df['gamemode'] >= 4).astype(int)
    
    # === –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–ï –£–†–û–í–ù–ò –ú–ê–°–¢–ï–†–°–¢–í–ê ===
    # –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–∏–≥–∞—Ö Clash Royale
    trophy_bins = [0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, np.inf]
    trophy_labels = ['arena1', 'arena2', 'arena3', 'arena4', 'arena5', 'arena6', 'arena7', 'legend']
    
    df['p1_skill_level'] = pd.cut(df['player_1_trophies'], bins=trophy_bins, labels=trophy_labels)
    df['p2_skill_level'] = pd.cut(df['player_2_trophies'], bins=trophy_bins, labels=trophy_labels)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if df['p1_skill_level'].dtype.name == 'category':
        df['p1_skill_level'] = df['p1_skill_level'].cat.add_categories(['unknown'])
        df['p2_skill_level'] = df['p2_skill_level'].cat.add_categories(['unknown'])
    
    df['p1_skill_level'] = df['p1_skill_level'].fillna('unknown').astype(str)
    df['p2_skill_level'] = df['p2_skill_level'].fillna('unknown').astype(str)
    df['player_1_tag'] = df['player_1_tag'].fillna('unknown').astype(str)
    df['player_2_tag'] = df['player_2_tag'].fillna('unknown').astype(str)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –≤ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
    for i in range(1, 9):
        df[f'player_1_card_{i}'] = df[f'player_1_card_{i}'].fillna(7).astype(int)  # 7 - —Å—Ä–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞
        df[f'player_2_card_{i}'] = df[f'player_2_card_{i}'].fillna(7).astype(int)
    
    # === –ü–†–û–î–í–ò–ù–£–¢–´–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø ===
    df['trophy_card_interaction'] = df['trophy_diff'] * df['card_mean_diff']
    df['trophy_gamemode_interaction'] = df['trophy_diff'] * df['gamemode']
    df['card_time_interaction'] = df['card_mean_diff'] * df['hour']
    df['skill_gap'] = (df['p1_skill_level'] != df['p2_skill_level']).astype(int)
    
    # === –ú–ï–¢–ê-–ü–†–ò–ó–ù–ê–ö–ò (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö) ===
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π)
    meta_cards = [1, 2, 3, 4, 5]  # –¢–æ–ø-5 –º–µ—Ç–∞ –∫–∞—Ä—Ç
    
    df['p1_meta_cards'] = sum((df[f'player_1_card_{i}'].isin(meta_cards)).astype(int) for i in range(1, 9))
    df['p2_meta_cards'] = sum((df[f'player_2_card_{i}'].isin(meta_cards)).astype(int) for i in range(1, 9))
    df['meta_advantage'] = df['p1_meta_cards'] - df['p2_meta_cards']
    
    # === –ü–û–õ–ò–ù–û–ú–ò–ê–õ–¨–ù–´–ï –ò –õ–û–ì–ê–†–ò–§–ú–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò ===
    df['trophy_diff_squared'] = df['trophy_diff'] ** 2
    df['trophy_diff_cubed'] = df['trophy_diff'] ** 3
    df['log_trophy_sum'] = np.log1p(df['trophy_sum'])
    df['log_abs_trophy_diff'] = np.log1p(df['abs_trophy_diff'])
    df['sqrt_trophy_sum'] = np.sqrt(df['trophy_sum'])
    
    # === –†–ê–ù–ì–û–í–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
    df['trophy_rank_p1'] = df['player_1_trophies'].rank(pct=True)
    df['trophy_rank_p2'] = df['player_2_trophies'].rank(pct=True)
    df['trophy_rank_diff'] = df['trophy_rank_p1'] - df['trophy_rank_p2']
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {df.shape[1]} –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π")
    return df

def train_ultimate_catboost(X_train, y_train, use_gpu=False):
    """–û–±—É—á–µ–Ω–∏–µ CatBoost —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("ü§ñ –û–ë–£–ß–ï–ù–ò–ï ULTIMATE CATBOOST")
    print("-" * 35)
    
    from catboost import CatBoostRegressor
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    cat_features = ['player_1_tag', 'player_2_tag', 'p1_skill_level', 'p2_skill_level'] + \
                   [f'player_1_card_{i}' for i in range(1, 9)] + \
                   [f'player_2_card_{i}' for i in range(1, 9)]
    
    cat_indices = [i for i, col in enumerate(X_train.columns) if col in cat_features]
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è)
    print("üöÄ –û–±—É—á–∞–µ–º Ultimate CatBoost...")
    model = CatBoostRegressor(
        cat_features=cat_indices,
        verbose=200,
        random_state=42
    )
    
    # GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    if use_gpu:
        try:
            model.set_params(task_type='GPU', devices='0')
            print("‚úÖ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        except:
            print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
    
    return model

def ultimate_postprocessing(predictions, X_test):
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–º–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    print("üéÆ ULTIMATE –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ê –° –ò–ì–†–û–í–û–ô –ú–ï–•–ê–ù–ò–ö–û–ô")
    
    import numpy as np
    
    # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–µ–∑–∫–∞
    predictions = np.clip(predictions, -3, 3)
    
    # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Ç—Ä–æ—Ñ–µ–µ–≤
    if 'trophy_diff' in X_test.columns:
        trophy_diff = X_test['trophy_diff'].values
        
        # –°–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —Ç—Ä–æ—Ñ–µ—è—Ö -> –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        strong_advantage = trophy_diff > 1500
        strong_disadvantage = trophy_diff < -1500
        
        # –£—Å–∏–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ –±–æ–ª—å—à–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏ —Ç—Ä–æ—Ñ–µ–µ–≤
        predictions[strong_advantage] = np.clip(predictions[strong_advantage] * 1.2, -3, 3)
        predictions[strong_disadvantage] = np.clip(predictions[strong_disadvantage] * 1.2, -3, 3)
    
    # –£–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    rounded_pred = np.round(predictions)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω—É–ª–µ–π (–Ω–∏—á—å–∏—Ö –Ω–µ –±—ã–≤–∞–µ—Ç –≤ Clash Royale)
    zero_mask = (rounded_pred == 0)
    
    # –î–ª—è –Ω—É–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    for i in np.where(zero_mask)[0]:
        if predictions[i] > 0.1:
            rounded_pred[i] = 1
        elif predictions[i] < -0.1:
            rounded_pred[i] = -1
        else:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏—Ö –∫ –Ω—É–ª—é
            rounded_pred[i] = np.random.choice([-1, 1])
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
    rounded_pred = np.clip(rounded_pred, -3, 3)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
    unique, counts = np.unique(rounded_pred, return_counts=True)
    print("üéÆ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π:")
    crown_names = {-3: "–†–∞–∑–≥—Ä–æ–º 0:3", -2: "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ 1:3", -1: "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ 2:3",
                   1: "–ü–æ–±–µ–¥–∞ 3:2", 2: "–ü–æ–±–µ–¥–∞ 3:1", 3: "–†–∞–∑–≥—Ä–æ–º 3:0"}
    
    for val, count in zip(unique, counts):
        name = crown_names.get(val, f"–†–µ–∑—É–ª—å—Ç–∞—Ç {val}")
        print(f"  {name}: {count:6d} ({count/len(rounded_pred)*100:5.1f}%)")
    
    return rounded_pred.astype(int)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ULTIMATE –≤–µ—Ä—Å–∏–∏"""
    print("üèÜ YANDEX CLOUD ULTIMATE SOLUTION - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ü–†–û–ö–ê–ß–ö–ê")
    print("=" * 70)
    print("üéÆ –° —É—á–µ—Ç–æ–º –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ Clash Royale")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_ultimate_dependencies()
    
    # –ò–º–ø–æ—Ä—Ç—ã
    import pandas as pd
    import numpy as np
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    use_gpu = check_gpu_ultimate()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    download_data_ultimate()
    
    print("\nüìä –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 20)
    
    df_train = pd.read_csv('train.csv')
    df_test = pd.read_csv('test.csv')
    submission = pd.read_csv('submission_example.csv')
    
    print(f"üìà Train: {df_train.shape}")
    print(f"üìâ Test: {df_test.shape}")
    print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã: {sorted(df_train['target'].unique())}")
    
    # Ultimate Feature Engineering
    print("\nüéÆ ULTIMATE FEATURE ENGINEERING")
    print("-" * 40)
    
    df_train = create_ultimate_features(df_train, is_train=True)
    df_test = create_ultimate_features(df_test, is_train=False)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    feature_cols = [col for col in df_train.columns 
                   if col not in ['id', 'datetime', 'target']]
    
    X_train = df_train[feature_cols]
    y_train = df_train['target']
    X_test = df_test[feature_cols]
    
    print(f"üìä –ò—Ç–æ–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nü§ñ –û–ë–£–ß–ï–ù–ò–ï ULTIMATE CATBOOST")
    print("-" * 35)
    
    model = train_ultimate_catboost(X_train, y_train, use_gpu)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cat_features = ['player_1_tag', 'player_2_tag', 'p1_skill_level', 'p2_skill_level'] + \
                   [f'player_1_card_{i}' for i in range(1, 9)] + \
                   [f'player_2_card_{i}' for i in range(1, 9)]
    
    print("üîß –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    for col in cat_features:
        if col in X_train.columns:
            # –†–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º category dtype
            if X_train[col].dtype.name == 'category':
                X_train[col] = X_train[col].astype('object')
                X_test[col] = X_test[col].astype('object')
            
            X_train[col] = X_train[col].fillna('missing').astype(str)
            X_test[col] = X_test[col].fillna('missing').astype(str)
    
    # –û–±—É—á–µ–Ω–∏–µ
    print("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("\nüîÆ ULTIMATE –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
    print("-" * 30)
    
    predictions = model.predict(X_test)
    final_predictions = ultimate_postprocessing(predictions, X_test)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    submission['target'] = final_predictions
    submission.to_csv('submission_ultimate.csv', index=False)
    
    print(f"\nüèÜ ULTIMATE –†–ï–®–ï–ù–ò–ï –ì–û–¢–û–í–û!")
    print("=" * 35)
    print(f"‚úÖ submission_ultimate.csv —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
    print(f"üéÆ –ò–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞: —É—á—Ç–µ–Ω–∞")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: CatBoost (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)")
    print(f"üöÄ GPU: {'–î–∞' if use_gpu else '–ù–µ—Ç'}")
    
    print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print("‚Ä¢ –ò–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ Clash Royale: +40-60% –∫ –∫–∞—á–µ—Å—Ç–≤—É")
    print("‚Ä¢ 150+ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: +30-50% –∫ –∫–∞—á–µ—Å—Ç–≤—É")
    print("‚Ä¢ –£–º–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: +15-25% –∫ –∫–∞—á–µ—Å—Ç–≤—É")
    print("‚Ä¢ –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: 85-135% vs –±–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
    
    print(f"\nüèÜ –ì–æ—Ç–æ–≤—ã –∫ —Ç–æ–ø—É –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ Clash Royale!")

if __name__ == "__main__":
    main() 
