#!/usr/bin/env python3
"""
üöÄ Yandex Cloud —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è Clash Royale (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Yandex DataSphere –∏ Compute Cloud
–£–ª—É—á—à–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

import os
import sys
import subprocess
import time
import warnings
warnings.filterwarnings('ignore')

# Yandex Cloud —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
YANDEX_ENV = '/home/jupyter' in os.getcwd() or 'DATASPHERE' in os.environ

def robust_install(package_name, alternative_names=None, pip_args=None):
    """
    –ù–∞–¥–µ–∂–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    """
    if alternative_names is None:
        alternative_names = []
    if pip_args is None:
        pip_args = []
    
    packages_to_try = [package_name] + alternative_names
    
    for package in packages_to_try:
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}...")
            cmd = [sys.executable, '-m', 'pip', 'install', package] + pip_args
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package}: {e}")
    
    return False

def install_dependencies_robust():
    """
    –ù–∞–¥–µ–∂–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Yandex Cloud
    """
    print("üîß –ù–ê–î–ï–ñ–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 45)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip —Å–Ω–∞—á–∞–ª–∞
    print("üì¶ –û–±–Ω–æ–≤–ª—è–µ–º pip...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                      capture_output=True, timeout=120)
    except:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    try:
        import pandas, numpy
        print("‚úÖ Pandas –∏ NumPy —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã...")
        robust_install('pandas numpy', pip_args=['--quiet'])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    packages = [
        ('polars', ['polars>=0.20.0', 'polars>=0.19.0', 'polars']),
        ('requests', ['requests>=2.25.0', 'requests']),
        ('scikit-learn', ['scikit-learn>=1.3.0', 'scikit-learn>=1.0.0', 'scikit-learn']),
        ('catboost', ['catboost>=1.2.0', 'catboost>=1.1.0', 'catboost'])
    ]
    
    failed_packages = []
    
    for package_name, alternatives in packages:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package_name}...")
        success = robust_install(alternatives[0], alternatives[1:], ['--quiet', '--no-cache-dir'])
        
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package_name}")
            failed_packages.append(package_name)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
        time.sleep(1)
    
    if failed_packages:
        print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {', '.join(failed_packages)}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ CatBoost
        if 'catboost' in failed_packages:
            print("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ CatBoost...")
            alternatives = [
                'catboost --no-deps',
                'catboost --force-reinstall',
                'https://files.pythonhosted.org/packages/source/c/catboost/catboost-1.2.tar.gz'
            ]
            
            for alt in alternatives:
                if robust_install(alt):
                    failed_packages.remove('catboost')
                    break
    
    return failed_packages

def check_yandex_gpu():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –≤ Yandex Cloud
    """
    print("üéÆ –ü–†–û–í–ï–†–ö–ê GPU –í YANDEX CLOUD")
    print("-" * 35)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if 'DATASPHERE' in os.environ:
        print("‚úÖ Yandex DataSphere –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º NVIDIA GPU
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ NVIDIA GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
            lines = result.stdout.split('\n')
            for line in lines:
                if any(gpu in line for gpu in ['Tesla', 'GeForce', 'Quadro', 'V100', 'T4', 'A100']):
                    print(f"üöÄ GPU: {line.strip()}")
                    break
            return True
        else:
            print("‚ö†Ô∏è  nvidia-smi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except (FileNotFoundError, subprocess.TimeoutExpired):
        print("‚ö†Ô∏è  nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ timeout")
    
    return False

def download_data_yandex():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Yandex Cloud —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    print("üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 20)
    
    required_files = ['train.csv', 'test.csv', 'submission_example.csv']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —É–∂–µ
    files_exist = all(os.path.exists(file) for file in required_files)
    
    if files_exist:
        print("‚úÖ –§–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –≤ Yandex Cloud
    yandex_paths = [
        '/home/jupyter/work/resources',
        '/home/jupyter/work',
        './data',
        './input',
        '.'
    ]
    
    for path in yandex_paths:
        if os.path.exists(path):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {path}...")
            for file in required_files:
                file_path = os.path.join(path, file)
                if os.path.exists(file_path):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω {file} –≤ {path}")
                    # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    try:
                        import shutil
                        shutil.copy2(file_path, file)
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {file}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
    files_exist = all(os.path.exists(file) for file in required_files)
    
    if not files_exist:
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏
        urls = [
            "http://devopn.ru:8000/cu-base-project.zip",
            "https://github.com/renat2006/ai-clash/raw/main/cu-base-project.zip"
        ]
        
        for url in urls:
            try:
                print(f"üåê –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å {url}...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    import requests
                    response = requests.get(url, timeout=60)
                    response.raise_for_status()
                    
                    import zipfile
                    from io import BytesIO
                    
                    print("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤...")
                    with zipfile.ZipFile(BytesIO(response.content)) as zip_ref:
                        zip_ref.extractall()
                    
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                    return True
                    
                except ImportError:
                    # Fallback –Ω–∞ wget/curl
                    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º wget...")
                    result = subprocess.run(['wget', '-O', 'data.zip', url], 
                                          capture_output=True, timeout=120)
                    if result.returncode == 0:
                        subprocess.run(['unzip', '-o', 'data.zip'], capture_output=True)
                        os.remove('data.zip')
                        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ wget!")
                        return True
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å {url}: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ñ–∞–π–ª—ã
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ñ–∞–π–ª—ã...")
        create_demo_files()
        return True
    
    return True

def create_demo_files():
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–æ–≤...")
    
    import pandas as pd
    import numpy as np
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π train.csv
    demo_data = {
        'id': range(1000),
        'datetime': ['20240101T120000.000Z'] * 1000,
        'gamemode': ['Classic'] * 500 + ['Tournament'] * 500,
        'player_1_tag': [f'#TAG{i}' for i in range(1000)],
        'player_2_tag': [f'#TAG{i+1000}' for i in range(1000)],
        'player_1_trophies': np.random.randint(1000, 8000, 1000),
        'player_2_trophies': np.random.randint(1000, 8000, 1000),
        'target': np.random.choice([-3, -2, -1, 1, 2, 3], 1000)
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    for i in range(1, 9):
        demo_data[f'player_1_card_{i}'] = np.random.randint(1, 15, 1000)
        demo_data[f'player_2_card_{i}'] = np.random.randint(1, 15, 1000)
    
    pd.DataFrame(demo_data).to_csv('train.csv', index=False)
    
    # –°–æ–∑–¥–∞–µ–º test.csv (–±–µ–∑ target)
    test_data = demo_data.copy()
    del test_data['target']
    test_data['id'] = range(1000, 1500)
    pd.DataFrame(test_data).to_csv('test.csv', index=False)
    
    # –°–æ–∑–¥–∞–µ–º submission_example.csv
    submission_data = {
        'id': range(1000, 1500),
        'target': [1] * 500
    }
    pd.DataFrame(submission_data).to_csv('submission_example.csv', index=False)
    
    print("‚úÖ –î–µ–º–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex Cloud
    """
    print("üöÄ YANDEX CLOUD CLASH ROYALE SOLUTION (FIXED)")
    print("=" * 55)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    if YANDEX_ENV:
        print("‚úÖ –ó–∞–ø—É—Å–∫ –≤ Yandex Cloud")
    else:
        print("‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ –≤–Ω–µ Yandex Cloud")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    failed_packages = install_dependencies_robust()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
    critical_missing = []
    
    try:
        import pandas as pd
        import numpy as np
        print("‚úÖ Pandas –∏ NumPy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        critical_missing.append('pandas/numpy')
    
    try:
        import polars as pl
        print("‚úÖ Polars –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        print("‚ö†Ô∏è  Polars –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pandas")
        # Fallback –Ω–∞ pandas
        import pandas as pd
        pl = None
    
    try:
        from catboost import CatBoostRegressor
        print("‚úÖ CatBoost –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        catboost_available = True
    except ImportError:
        print("‚ùå CatBoost –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        catboost_available = False
        
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        try:
            from sklearn.ensemble import GradientBoostingRegressor
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º sklearn GradientBoosting –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É")
        except ImportError:
            critical_missing.append('catboost/sklearn')
    
    if critical_missing:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {critical_missing}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å kernel")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    use_gpu = check_yandex_gpu() and catboost_available
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not download_data_yandex():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    print("\nüìä –ó–ê–ì–†–£–ó–ö–ê –ò –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("-" * 35)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if pl is not None:
        try:
            df_train = pl.read_csv('train.csv')
            df_test = pl.read_csv('test.csv')
            submission = pd.read_csv('submission_example.csv')
            use_polars = True
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ Polars: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pandas")
            use_polars = False
    else:
        use_polars = False
    
    if not use_polars:
        df_train = pd.read_csv('train.csv')
        df_test = pd.read_csv('test.csv')
        submission = pd.read_csv('submission_example.csv')
    
    print(f"üìà Train shape: {df_train.shape}")
    print(f"üìâ Test shape: {df_test.shape}")
    print(f"üìã Submission shape: {submission.shape}")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π feature engineering –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def create_simple_features(df, is_train=True):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ({'train' if is_train else 'test'})...")
        
        if use_polars:
            # Polars –≤–µ—Ä—Å–∏—è
            df = df.with_columns([
                (pl.col('player_1_trophies') - pl.col('player_2_trophies')).alias('trophy_diff'),
                (pl.col('player_1_trophies') + pl.col('player_2_trophies')).alias('trophy_sum'),
                (pl.col('player_1_trophies') / (pl.col('player_2_trophies') + 1)).alias('trophy_ratio')
            ])
            
            # –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            card_cols_p1 = [f'player_1_card_{i}' for i in range(1, 9)]
            card_cols_p2 = [f'player_2_card_{i}' for i in range(1, 9)]
            
            df = df.with_columns([
                pl.mean_horizontal(card_cols_p1).alias('player_1_avg_card'),
                pl.mean_horizontal(card_cols_p2).alias('player_2_avg_card')
            ])
            
            df = df.with_columns([
                (pl.col('player_1_avg_card') - pl.col('player_2_avg_card')).alias('avg_card_diff')
            ])
            
        else:
            # Pandas –≤–µ—Ä—Å–∏—è
            df = df.copy()
            df['trophy_diff'] = df['player_1_trophies'] - df['player_2_trophies']
            df['trophy_sum'] = df['player_1_trophies'] + df['player_2_trophies']
            df['trophy_ratio'] = df['player_1_trophies'] / (df['player_2_trophies'] + 1)
            
            # –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            card_cols_p1 = [f'player_1_card_{i}' for i in range(1, 9)]
            card_cols_p2 = [f'player_2_card_{i}' for i in range(1, 9)]
            
            df['player_1_avg_card'] = df[card_cols_p1].mean(axis=1)
            df['player_2_avg_card'] = df[card_cols_p2].mean(axis=1)
            df['avg_card_diff'] = df['player_1_avg_card'] - df['player_2_avg_card']
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {df.shape}")
        return df
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("\nüîß FEATURE ENGINEERING")
    print("-" * 25)
    
    df_train = create_simple_features(df_train, is_train=True)
    df_test = create_simple_features(df_test, is_train=False)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—É—á–µ–Ω–∏—é
    print("\nü§ñ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –û–ë–£–ß–ï–ù–ò–Æ")
    print("-" * 30)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    cat_features = ['gamemode', 'player_1_tag', 'player_2_tag'] + \
                   [f'player_1_card_{i}' for i in range(1, 9)] + \
                   [f'player_2_card_{i}' for i in range(1, 9)]
    
    print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(cat_features)}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if use_polars:
        X_train = df_train.drop(['id', 'datetime', 'target']).to_pandas()
        y_train = df_train['target'].to_pandas()
        X_test = df_test.drop(['id', 'datetime']).to_pandas()
    else:
        X_train = df_train.drop(['id', 'datetime', 'target'], axis=1)
        y_train = df_train['target']
        X_test = df_test.drop(['id', 'datetime'], axis=1)
    
    print(f"üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {X_train.shape}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
    if catboost_available:
        model_params = {
            'cat_features': cat_features,
            'random_state': 52,
            'verbose': 100,
            'iterations': 1000 if use_gpu else 500,
            'learning_rate': 0.1,
            'depth': 6
        }
        
        if use_gpu:
            model_params.update({
                'task_type': 'GPU',
                'devices': '0'
            })
            print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        else:
            model_params['task_type'] = 'CPU'
            print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        
        model = CatBoostRegressor(**model_params)
    else:
        # Fallback –Ω–∞ sklearn
        from sklearn.ensemble import GradientBoostingRegressor
        from sklearn.preprocessing import LabelEncoder
        
        print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º sklearn GradientBoosting")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        le_dict = {}
        for col in cat_features:
            if col in X_train.columns:
                le = LabelEncoder()
                X_train[col] = le.fit_transform(X_train[col].astype(str))
                X_test[col] = le.transform(X_test[col].astype(str))
                le_dict[col] = le
        
        model = GradientBoostingRegressor(
            n_estimators=500,
            learning_rate=0.1,
            max_depth=6,
            random_state=52,
            verbose=1
        )
    
    # –û–±—É—á–µ–Ω–∏–µ
    print(f"\n‚è≥ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("-" * 20)
    
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print(f"\nüîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
    print("-" * 15)
    
    predictions = model.predict(X_test)
    
    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("üîß –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    predictions = np.clip(predictions, -3, 3)
    predictions = np.round(predictions)
    predictions = np.where(predictions == 0, 
                          np.where(predictions >= 0, 1, -1), 
                          predictions)
    predictions = np.clip(predictions, -3, 3)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    submission['target'] = predictions.astype(int)
    submission.to_csv('submission.csv', index=False)
    
    print(f"\nüéâ –ì–û–¢–û–í–û!")
    print("=" * 20)
    print(f"‚úÖ submission.csv —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {X_train.shape[1]}")
    print(f"üöÄ GPU: {'–î–∞' if use_gpu else '–ù–µ—Ç'}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {'CatBoost' if catboost_available else 'sklearn'}")
    
    print(f"\nüèÜ –£–¥–∞—á–∏ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏!")

if __name__ == "__main__":
    main() 
