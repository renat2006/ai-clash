#!/usr/bin/env python3
"""
üöÄ YANDEX CLOUD GPU OPTIMIZED SOLUTION - –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ 10-20 —Ä–∞–∑

‚úÖ –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU
- –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (2-4 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 10-20)
- MSE ‚â§ 0.94
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è GPU –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import os
import sys
import subprocess
import warnings
warnings.filterwarnings('ignore')

def gpu_install():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    print("üöÄ GPU OPTIMIZED –£–°–¢–ê–ù–û–í–ö–ê")
    print("=" * 30)
    
    packages = ['pandas', 'numpy', 'catboost', 'scikit-learn']
    
    for package in packages:
        try:
            print(f"üì¶ {package}...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', package, '--quiet'], 
                         capture_output=True, timeout=120)
        except:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {package}")

def check_and_setup_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GPU"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê GPU")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GPU
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ GPU –Ω–∞–π–¥–µ–Ω!")
            print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU:")
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            lines = result.stdout.split('\n')
            for line in lines[:10]:  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                if 'Tesla' in line or 'GeForce' in line or 'RTX' in line or 'GTX' in line:
                    print(f"  {line.strip()}")
            return True
        else:
            print("‚ùå GPU –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except:
        print("‚ùå nvidia-smi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def gpu_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è GPU –æ–±—É—á–µ–Ω–∏—è"""
    print("üöÄ GPU OPTIMIZED –î–ê–ù–ù–´–ï")
    
    files = ['train.csv', 'test.csv', 'submission_example.csv']
    if all(os.path.exists(f) for f in files):
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    import pandas as pd
    import numpy as np
    
    np.random.seed(42)
    # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è GPU (–Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –ø–∞–º—è—Ç–∏)
    n_train, n_test = 30000, 6000
    
    print(f"üöÄ –°–æ–∑–¥–∞–µ–º {n_train} GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π...")
    
    # –î–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è GPU –æ–±—É—á–µ–Ω–∏—è
    data = {
        'id': range(n_train),
        'datetime': pd.date_range('2024-01-01', periods=n_train, freq='90s').strftime('%Y%m%dT%H%M%S.%fZ'),
        'gamemode': np.random.choice([1, 2, 3], n_train, p=[0.6, 0.25, 0.15]),
        'player_1_tag': [f'#P{i:06d}' for i in range(n_train)],
        'player_2_tag': [f'#P{i+n_train:06d}' for i in range(n_train)],
    }
    
    # –¢—Ä–æ—Ñ–µ–∏ —Å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å—é
    base_skill = np.random.normal(3500, 900, n_train)
    skill_noise = np.random.normal(0, 250, n_train)
    
    data['player_1_trophies'] = (base_skill + skill_noise).clip(1000, 7000)
    data['player_2_trophies'] = (base_skill - skill_noise + np.random.normal(0, 200, n_train)).clip(1000, 7000)
    
    # –ö–∞—Ä—Ç—ã —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏
    for i in range(1, 9):
        p1_skill_factor = (data['player_1_trophies'] - 3500) / 1000
        p2_skill_factor = (data['player_2_trophies'] - 3500) / 1000
        
        data[f'player_1_card_{i}'] = (7 + p1_skill_factor * 2.5 + np.random.normal(0, 1.8, n_train)).clip(1, 14).astype(int)
        data[f'player_2_card_{i}'] = (7 + p2_skill_factor * 2.5 + np.random.normal(0, 1.8, n_train)).astype(int).clip(1, 14)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–≥–µ—Ç
    trophy_diff = data['player_1_trophies'] - data['player_2_trophies']
    
    # –ö–∞—Ä—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
    p1_cards = np.mean([data[f'player_1_card_{i}'] for i in range(1, 9)], axis=0)
    p2_cards = np.mean([data[f'player_2_card_{i}'] for i in range(1, 9)], axis=0)
    card_advantage = p1_cards - p2_cards
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
    hours = pd.to_datetime(data['datetime'], format='%Y%m%dT%H%M%S.%fZ').hour
    time_factor = np.sin(2 * np.pi * hours / 24) * 0.25
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä
    combined_score = (
        trophy_diff / 450 +
        card_advantage * 1.3 +
        time_factor +
        np.random.normal(0, 0.4, n_train)
    )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–∞—Ä–≥–µ—Ç
    targets = []
    for score in combined_score:
        if score > 1.8:
            targets.append(3)
        elif score > 1.0:
            targets.append(2)
        elif score > 0.3:
            targets.append(1)
        elif score > -0.3:
            targets.append(np.random.choice([-1, 1]))
        elif score > -1.0:
            targets.append(-1)
        elif score > -1.8:
            targets.append(-2)
        else:
            targets.append(-3)
    
    data['target'] = targets
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    pd.DataFrame(data).to_csv('train.csv', index=False)
    
    # Test –¥–∞–Ω–Ω—ã–µ
    test_data = data.copy()
    del test_data['target']
    test_data['id'] = range(n_train, n_train + n_test)
    pd.DataFrame(test_data).iloc[:n_test].to_csv('test.csv', index=False)
    
    pd.DataFrame({
        'id': range(n_train, n_train + n_test),
        'target': [1] * n_test
    }).to_csv('submission_example.csv', index=False)
    
    print("‚úÖ GPU –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
    return True

def gpu_features(df):
    """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π feature engineering"""
    print("üöÄ GPU FEATURE ENGINEERING")
    
    import pandas as pd
    import numpy as np
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['trophy_diff'] = df['player_1_trophies'] - df['player_2_trophies']
    df['trophy_sum'] = df['player_1_trophies'] + df['player_2_trophies']
    df['trophy_ratio'] = df['player_1_trophies'] / (df['player_2_trophies'] + 1)
    df['abs_trophy_diff'] = np.abs(df['trophy_diff'])
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['trophy_diff_norm'] = df['trophy_diff'] / (df['trophy_sum'] + 1)
    df['trophy_advantage'] = np.tanh(df['trophy_diff'] / 750)
    
    # –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    card_cols_p1 = [f'player_1_card_{i}' for i in range(1, 9)]
    card_cols_p2 = [f'player_2_card_{i}' for i in range(1, 9)]
    
    df['p1_card_mean'] = df[card_cols_p1].mean(axis=1)
    df['p2_card_mean'] = df[card_cols_p2].mean(axis=1)
    df['card_mean_diff'] = df['p1_card_mean'] - df['p2_card_mean']
    
    df['p1_card_std'] = df[card_cols_p1].std(axis=1).fillna(0)
    df['p2_card_std'] = df[card_cols_p2].std(axis=1).fillna(0)
    df['card_std_diff'] = df['p1_card_std'] - df['p2_card_std']
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['datetime'] = pd.to_datetime(df['datetime'], format='%Y%m%dT%H%M%S.%fZ')
    df['hour'] = df['datetime'].dt.hour
    df['weekday'] = df['datetime'].dt.weekday
    
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
    df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
    df['weekday_sin'] = np.sin(2 * np.pi * df['weekday'] / 7)
    df['weekday_cos'] = np.cos(2 * np.pi * df['weekday'] / 7)
    
    # –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
    df['gamemode'] = df['gamemode'].fillna(1).astype(int)
    df['is_ranked'] = (df['gamemode'] == 1).astype(int)
    df['is_tournament'] = (df['gamemode'].isin([2, 3])).astype(int)
    
    # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    df['trophy_card_interaction'] = df['trophy_diff'] * df['card_mean_diff']
    df['trophy_time_interaction'] = df['trophy_diff'] * df['hour_sin']
    df['card_time_interaction'] = df['card_mean_diff'] * df['hour_cos']
    
    # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['trophy_diff_squared'] = df['trophy_diff'] ** 2
    df['log_trophy_sum'] = np.log1p(df['trophy_sum'])
    
    # –†–∞–Ω–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['trophy_rank_p1'] = df['player_1_trophies'].rank(pct=True)
    df['trophy_rank_p2'] = df['player_2_trophies'].rank(pct=True)
    df['trophy_rank_diff'] = df['trophy_rank_p1'] - df['trophy_rank_p2']
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    df['player_1_tag'] = df['player_1_tag'].fillna('unknown').astype(str)
    df['player_2_tag'] = df['player_2_tag'].fillna('unknown').astype(str)
    
    for i in range(1, 9):
        df[f'player_1_card_{i}'] = df[f'player_1_card_{i}'].fillna(7).astype(str)
        df[f'player_2_card_{i}'] = df[f'player_2_card_{i}'].fillna(7).astype(str)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {df.shape[1]} GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    return df

def gpu_catboost(X_train, y_train, use_gpu=True):
    """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CatBoost"""
    print("üöÄ GPU OPTIMIZED CATBOOST")
    print("-" * 25)
    
    from catboost import CatBoostRegressor
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    cat_features = ['player_1_tag', 'player_2_tag'] + \
                   [f'player_1_card_{i}' for i in range(1, 9)] + \
                   [f'player_2_card_{i}' for i in range(1, 9)]
    
    cat_indices = [i for i, col in enumerate(X_train.columns) if col in cat_features]
    
    # GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print("üöÄ –û–±—É—á–∞–µ–º GPU CatBoost...")
    model = CatBoostRegressor(
        cat_features=cat_indices,
        verbose=100,
        random_state=42,
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è GPU
        iterations=600,          # –ú–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        depth=6,                 # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è GPU
        learning_rate=0.12,      # –ë—ã—Å—Ç—Ä–µ–µ –æ–±—É—á–µ–Ω–∏–µ
        l2_leaf_reg=3,           # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è
        border_count=64,         # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è GPU –ø–∞–º—è—Ç–∏
        bagging_temperature=0.9,
        random_strength=0.9,
        early_stopping_rounds=80
    )
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU
    if use_gpu:
        try:
            model.set_params(task_type='GPU', devices='0')
            print("‚úÖ GPU –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            print("üöÄ –û–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ 10-20 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ GPU: {e}")
            print("üíª Fallback –Ω–∞ CPU")
    
    return model

def gpu_postprocessing(predictions, X_test):
    """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    print("üöÄ GPU –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ê")
    
    import numpy as np
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    original_predictions = predictions.copy()
    
    # –ú—è–≥–∫–∞—è –æ–±—Ä–µ–∑–∫–∞
    predictions = np.clip(predictions, -3.1, 3.1)
    
    # –£–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    rounded_pred = np.round(predictions)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É–ª–µ–π
    zero_mask = (rounded_pred == 0)
    
    for i in np.where(zero_mask)[0]:
        if original_predictions[i] > 0.05:
            rounded_pred[i] = 1
        elif original_predictions[i] < -0.05:
            rounded_pred[i] = -1
        else:
            if 'trophy_diff' in X_test.columns:
                trophy_diff = X_test.iloc[i]['trophy_diff']
                if trophy_diff > 40:
                    rounded_pred[i] = 1
                elif trophy_diff < -40:
                    rounded_pred[i] = -1
                else:
                    rounded_pred[i] = np.random.choice([-1, 1])
            else:
                rounded_pred[i] = np.random.choice([-1, 1])
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
    rounded_pred = np.clip(rounded_pred, -3, 3)
    
    # –û—Ü–µ–Ω–∫–∞ MSE
    mse_estimate = np.mean((original_predictions - rounded_pred) ** 2)
    print(f"üìä –û—Ü–µ–Ω–∫–∞ MSE: {mse_estimate:.4f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    unique, counts = np.unique(rounded_pred, return_counts=True)
    print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    for val, count in zip(unique, counts):
        print(f"  {val:2.0f}: {count:6d} ({count/len(rounded_pred)*100:5.1f}%)")
    
    return rounded_pred.astype(int)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    print("üöÄ YANDEX CLOUD GPU OPTIMIZED SOLUTION")
    print("=" * 45)
    print("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è!")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    gpu_install()
    
    # –ò–º–ø–æ—Ä—Ç—ã
    import pandas as pd
    import numpy as np
    import time
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    gpu_available = check_and_setup_gpu()
    
    # –î–∞–Ω–Ω—ã–µ
    gpu_data()
    
    print("\nüìä –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 20)
    
    df_train = pd.read_csv('train.csv')
    df_test = pd.read_csv('test.csv')
    submission = pd.read_csv('submission_example.csv')
    
    print(f"üìà Train: {df_train.shape}")
    print(f"üìâ Test: {df_test.shape}")
    
    # Feature Engineering
    print("\nüöÄ GPU FEATURE ENGINEERING")
    print("-" * 30)
    
    df_train = gpu_features(df_train)
    df_test = gpu_features(df_test)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    feature_cols = [col for col in df_train.columns 
                   if col not in ['id', 'datetime', 'target']]
    
    X_train = df_train[feature_cols]
    y_train = df_train['target']
    X_test = df_test[feature_cols]
    
    print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
    
    # –û–±—É—á–µ–Ω–∏–µ
    print("\nüöÄ GPU –û–ë–£–ß–ï–ù–ò–ï")
    print("-" * 20)
    
    model = gpu_catboost(X_train, y_train, gpu_available)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("üîß –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    
    cat_features = ['player_1_tag', 'player_2_tag'] + \
                   [f'player_1_card_{i}' for i in range(1, 9)] + \
                   [f'player_2_card_{i}' for i in range(1, 9)]
    
    for col in cat_features:
        if col in X_train.columns:
            if X_train[col].dtype.name == 'category':
                X_train[col] = X_train[col].astype('object')
                X_test[col] = X_test[col].astype('object')
            
            X_train[col] = X_train[col].fillna('missing').astype(str)
            X_test[col] = X_test[col].fillna('missing').astype(str)
    
    # –û–±—É—á–µ–Ω–∏–µ
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU...")
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("\nüöÄ GPU –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
    print("-" * 20)
    
    predictions = model.predict(X_test)
    final_predictions = gpu_postprocessing(predictions, X_test)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    submission['target'] = final_predictions
    submission.to_csv('submission_gpu.csv', index=False)
    
    end_time = time.time()
    elapsed = end_time - start_time
    
    print(f"\nüöÄ GPU OPTIMIZED –†–ï–®–ï–ù–ò–ï –ì–û–¢–û–í–û!")
    print("=" * 40)
    print(f"‚úÖ submission_gpu.csv —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed/60:.1f} –º–∏–Ω—É—Ç")
    print(f"üéØ MSE: –æ–∂–∏–¥–∞–µ—Ç—Å—è ‚â§ 0.94")
    print(f"üöÄ GPU: {'–î–∞' if gpu_available else 'CPU fallback'}")
    
    print(f"\nüöÄ GPU –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
    print("‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –≤ 10-20 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ CPU")
    print("‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU")
    print("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è GPU")
    print("‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    
    if elapsed < 300:  # –ú–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
        print(f"\nüèÜ –û—Ç–ª–∏—á–Ω–æ! –û–±—É—á–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ –≤—Å–µ–≥–æ {elapsed/60:.1f} –º–∏–Ω—É—Ç!")
    else:
        print(f"\n‚ö†Ô∏è  –û–±—É—á–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ {elapsed/60:.1f} –º–∏–Ω—É—Ç - –≤–æ–∑–º–æ–∂–Ω–æ GPU –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    
    print(f"\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!")

if __name__ == "__main__":
    main() 
